maximum pccuring character


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'maximumOccurringCharacter' function below.
     *
     * The function is expected to return a CHARACTER.
     * The function accepts STRING text as parameter.
     */

    public static char maximumOccurringCharacter(String text) {
    // Write your code here
    //HashMap<Character, Integer> hmap = new HashMap<>();

    char [] arr = text.toCharArray();
    /*
    for(char c : arr)
    {
        if(hmap.containsKey(c))
        {
            hmap.put(c, hmap.get(c)+1);            
        }
        else{
            hmap.put(c,1);            
        }
    }
*/
    int max = 0;
    char c=' ';

    int count [] = new int [256];
    for(int i=0; i<arr.length;i++)
    {
        count[arr[i]]++;
    }
    for(int i=0; i<arr.length;i++)
    {
        if(max<count[arr[i]]){
            max = count[arr[i]];
            c= arr[i];
        }
    }

    System.out.print(c+" "+max);

    return c;

    
    


    }

}

public class Solution {

/*****************minimum sum after k step


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'minSum' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY num
     *  2. INTEGER k
     */

    public static int minSum(List<Integer> num, int k) {
    // Write your code here

    PriorityQueue<Integer> pq = new PriorityQueue<>(num.size(), (left,right) -> right -left);

    pq.addAll(num);

    for(int i=0; i<k; i++)
    {
        int nextNum = pq.remove();
        pq.add((nextNum+1)/2);
    }

    return pq.stream().mapToInt(Integer::intValue).sum();




    }

}

public class Solution {
